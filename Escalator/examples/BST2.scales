Binary Search Trees

A binary search tree (BST) is a tree with values of type T (which must have an ordering) at each node, such that all of the values in the left subtree are less than or equal to the value in the node, and all of the values in the right subtree are greater than or equal.

Here is the definition of the basic tree data type (note that T does not have to be orderable yet):
@
sealed trait Tree[+T] {
  def toList = concat(Nil)
  def concat[U >: T](list : List[U]) : List[U]
}

case object Tip extends Tree[Nothing] {
  def concat[U](list : List[U]) = list
}

case class Node[T](left : Tree[T], value : T, right : Tree[T]) extends Tree[T] {
  def concat[U >: T](list : List[U]) = left.concat(value :: right.concat(list))
}
@@

The use of the auxiliary concat method to define toList is just an exploration into improving the efficiency of toList -- tree.concat(list) prepends the contents of the tree (in an inorder traversal) to the list, without creating any intermediate lists.

Here is an example of a tree (which is _not_ a BST -- make sure you see why):
> Node(Tip, 42, Node(Node(Tip, 37, Tip), 54, Tip))

> Node(Tip, 42, Node(Node(Tip, 37, Tip), 54, Tip)).toList

Now we may define an insert method -- this requires that T be viewable as an ordered type:
@
def insert[T <% Ordered[T]](x : T, tree : Tree[T]) : Tree[T] = tree match {
  case Tip => Node(Tip, x, Tip)
  case Node(left, value, right) if x < value =>
    Node(insert(x, left), value, right)
  case Node(left, value, right) if x >= value =>
    Node(left, value, insert(x, right))
}
@@

> insert(42, insert(37, insert(55, Tip)))

Once we have an ordered tree, we may define the binary search operation:
@
def search[T <% Ordered[T]](x : T, tree : Tree[T]) : Boolean = tree match {
  case Tip => false
  case Node(left, value, right) if x < value => search(x, left)
  case Node(left, value, right) if x > value => search(x, right)
  case _ => true
}
@@

> search(17, insert(42, insert(37, insert(55, Tip))))

> search(37, insert(42, insert(37, insert(55, Tip))))

> search(47, insert(42, insert(37, insert(55, Tip))))

> search(55, insert(42, insert(37, insert(55, Tip))))


Here is the tree sort algorithm:
@
def tsort[T <% Ordered[T]](values : List[T]) =
  values.foldRight(Tip : Tree[T])(insert).toList
@@

> tsort(List(83, 67, 65, 76, 65))

> tsort("SCALA".toList)

